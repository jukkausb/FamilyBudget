@using FamilyBudget.v3.App_Helpers
@using FamilyBudget.v3.Models
@model FamilyBudget.v3.Areas.Administration.Models.InvestmentInstrumentListModel

@{
    string returnParameters = QueryStringParser.EncodeGridParameters(Model.PageIndex, Model.SortField, Model.SortDirection);
}

<style>
    .configuration-messages-trigger {
        display: inline-block;
    }
</style>

<div class="container-fluid">

    <!-- Page Heading -->
    <div class="text-center mb-4">
        <h1 class="h3 mb-0 text-gray-800 font-weight-bold">Конфигурация инвестиционного портфеля</h1>
    </div>
    @{
        @helper RenderModal(string modalId, string caption, bool isSmall, HelperResult renderContentFunc)
        {
            string modalCssClass = isSmall ? "" : "modal-lg";
            <div class="modal fade" id="@modalId" tabindex="-10" role="dialog">
                <div class="modal-dialog modal-dialog-centered @modalCssClass" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@caption</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            @Html.Raw(renderContentFunc.ToString())
                        </div>
                    </div>
                </div>
            </div>
        }
        @helper RenderMessageGroups(List<MessageGroup> messageGroups)
        {
            if (messageGroups == null)
            {
                return;
            }

            foreach (var messageGroup in messageGroups)
            {
                if (!messageGroup.HasMessages)
                {
                    continue;
                }

                <h6><b>@messageGroup.Name</b></h6>
                @RenderMessages(messageGroup.Messages)
            }
        }
        @helper RenderMessages(List<Message> messages)
        {
            if (messages == null || !messages.Any())
            {
                return;
            }

            <ul>
                @foreach (var message in messages)
                {
                    <li>@Html.Raw(message.Text)</li>
                }
            </ul>
        }
        @helper RenderWarningModalTrigger(string modalId, bool isSmall)
        {
            string modalTriggerButtonCssClass = isSmall ? "btn-sm" : "";
            <div class="configuration-messages-trigger" data-toggle="modal" data-target="#@modalId">
                <a href="#" class="btn btn-warning btn-circle @modalTriggerButtonCssClass">
                    <i class="fas fa-exclamation-triangle"></i>
                </a>
            </div>
        }
    }
    <div class="row list-view">
        <div class="col-lg-12 mb-3">
            @if (Model.MessageGroups.Any())
            {
                string modalId = "modalAccountInfo_totalPercent";
                @RenderWarningModalTrigger(modalId, false)
                @RenderModal(modalId, "Внимание!", true, RenderMessageGroups(Model.MessageGroups))
            }
            @Html.ActionLink("Создать инструмент", "Create", new { returnParams = @returnParameters }, new { @class = "btn btn-primary pull-right" })
        </div>
        <div class="col-lg-12">
            <div class="card mb-4">
                <div class="card-body">
                    @{
                        WebGrid grid = WebGridHelpers.CreateWebGridWithJqueryUiStyle(Model.Entities, rowsPerPage: Model.PageSize, canPage: true, canSort: true, defaultSort: "Code");
                        @grid.GetHtmlJqueryUiStyle(mode: WebGridPagerModes.All, showNoDataFound: true,
                            columns: grid.Columns(
                            grid.Column("Code", "Код", item => Html.Raw("<span class=\"d-none\">Код</span>" + item.Code)),
                            grid.Column("DiagramBackgroundColor", "Цвет фона диаграммы", item => Html.Raw("<span class=\"d-none\">Цвет фона диаграммы</span><div class=\"grid-color-sample\" style=\"background-color: " + item.DiagramBackgroundColor + "\"></div>")),
                            grid.Column("DiagramBackgroundHoverColor", "Цвет фона диаграммы в фокусе", item => Html.Raw("<span class=\"d-none\">Цвет фона диаграммы в фокусе</span><div class=\"grid-color-sample\" style=\"background-color: " + item.DiagramBackgroundHoverColor + "\"></div>")),
                            grid.Column("DiagramHoverBorderColor", "Цвет границ диаграммы в фокусе", item => Html.Raw("<span class=\"d-none\">Цвет границ диаграммы в фокусе</span><div class=\"grid-color-sample\" style=\"background-color: " + item.DiagramHoverBorderColor + "\"></div>")),

                            grid.Column("Type", "Тип", item => Html.Raw("<span class=\"d-none\">Тип</span>" + item.Type)),
                            grid.Column("Market", "Рынок", item => Html.Raw("<span class=\"d-none\">Рынок</span>" + item.Market)),

                            grid.Column("ExternalAvatarIsinOverride", "Avatar ISIN override", item => Html.Raw("<span class=\"d-none\">Avatar ISIN override</span>" + item.ExternalAvatarIsinOverride)),
                            grid.Column("ExternalPageTickerOverride", "Ticker page override", item => Html.Raw("<span class=\"d-none\">Ticker page override</span>" + item.ExternalPageTickerOverride)),

                            grid.Column("PortfolioPercent", "% в портфеле", item => Html.Raw("<span class=\"d-none\">% в портфеле</span>" + item.PortfolioPercent)),
                            grid.Column("PortfolioPercentDelta", "Дельта, %", item => Html.Raw("<span class=\"d-none\">Дельта, %</span>" + item.PortfolioPercentDelta)),

                            grid.Column(style: "webgrid-editColumn", format: @<a href="@Url.Action("Edit", "InvestmentInstrument", new { id = item.ID, returnParams = @returnParameters })" class="btn btn-info btn-circle"><i class="far fa-edit"></i></a>),
grid.Column(style: "webgrid-deleteColumn", format: @<a href="@Url.Action("Delete", "InvestmentInstrument", new { id = item.ID, returnParams = @returnParameters })" class="btn btn-danger btn-circle"><i class="far fa-trash-alt"></i></a>)
));
                    }
                </div>
            </div>
        </div>
    </div>
</div>