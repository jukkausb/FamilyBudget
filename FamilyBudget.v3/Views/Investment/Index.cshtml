@using System.Linq;
@using FamilyBudget.v3.Models;
@using FamilyBudget.v3.App_CodeBase.Tinkoff.Models;
@model FamilyBudget.v3.Models.InvestmentModel

<script src="~/js/chart.js/Chart.min.js"></script>
<div class="container-fluid">
    <script type="text/javascript">
        // Set new default font family and font color to mimic Bootstrap's default styling
        Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#858796';
        Chart.defaults.global.defaultFontSize = 16;

        // Source interface is IPieDiagramDataItem
        function buildPieChart(canvasId, reportData) {
            var ctx = document.getElementById(canvasId);

            var backgroundColors = _.map(reportData, function (r) {
                return r.diagramBackgroundColor;
            });
            var hoverBackgroundColors = _.map(reportData, function (r) {
                return r.diagramBackgroundHoverColor;
            });
            var hoverBorderColors = _.map(reportData, function (r) {
                return r.diagramHoverBorderColor;
            });

            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: _.map(reportData, function (r) {
                        return r.name;
                    }),
                    datasets: [{
                        data: _.map(reportData, function (r) {
                            return (r.currentTotalInPortfolio + "").replace(/\s/g, '');
                        }),
                        backgroundColor: backgroundColors,
                        hoverBackgroundColor: hoverBackgroundColors,
                        hoverBorderColor: hoverBorderColors,
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: true
                    },
                    cutoutPercentage: 20
                },
            });
        }

    </script>

    <!-- Page Heading -->
    <div class="text-center mb-4">
        <h1 class="h3 mb-0 text-gray-800 font-weight-bold">Инвестирование</h1>
    </div>

    <div class="row">
        <div class="col-xl-12 col-md-6 mb-4">
            @if (Model.Message != null)
            {
                @Html.Partial("~/Views/Shared/MessageModel.cshtml", Model.Message)
            }
        </div>
    </div>

    @{
        @helper RenderModal(string modalId, string caption, bool isSmall, HelperResult renderContentFunc)
        {
            string modalCssClass = isSmall ? "" : "modal-lg";
            <div class="modal fade" id="@modalId" tabindex="-10" role="dialog">
                <div class="modal-dialog modal-dialog-centered @modalCssClass" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@caption</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            @Html.Raw(renderContentFunc.ToString())
                        </div>
                    </div>
                </div>
            </div>
        }
        @helper RenderMessageGroups(List<MessageGroup> messageGroups)
        {
            if (messageGroups == null)
            {
                return;
            }

            foreach (var messageGroup in messageGroups)
            {
                if (!messageGroup.HasMessages)
                {
                    continue;
                }

                <h6><b>@messageGroup.Name</b></h6>
                @RenderMessages(messageGroup.Messages)
            }
        }
        @helper RenderMessages(List<Message> messages)
        {
            if (messages == null || !messages.Any())
            {
                return;
            }

            <ul>
                @foreach (var message in messages)
                {
                    <li>@Html.Raw(message.Text)</li>
                }
            </ul>
        }
        @helper RenderPositionsPieChart(string canvasId, string modalId, IEnumerable<IPieDiagramDataItem> reportData)
        {
            <canvas id="@canvasId"></canvas>
            <script>
                @{
                    string reportJsonData = FamilyBudget.v3.App_Helpers.JsonSerializeHelper.Serialize(reportData)
                        .Replace(System.Environment.NewLine, "");
                }
                var reportData = JSON.parse('@Html.Raw(reportJsonData)');
                buildPieChart('@canvasId', reportData);
            </script>
        }
        @helper RenderAccountHeader(InvestmentAccount account)
        {
            <div class="card border-left-success shadow py-2 mb-4">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="h5 text-xl-center font-weight-bold text-gray-900 text-uppercase mb-1">@account.Name</div>
                            <div class="text-xl-center text-primary">
                                @Html.Partial("~/Views/Shared/DisplayTemplates/_MoneyWithDelta.cshtml", account.Totals)
                            </div>
                        </div>
                        @if (account.MessageGroups.Any())
                        {
                            string modalId = "modalAccountInfo_" + account.Id;
                            @RenderWarningModalTrigger(modalId, false)
                            @RenderModal(modalId, "Информация (" + @account.Name + ")", true, RenderMessageGroups(account.MessageGroups))
                        }
                        @if (account.Groups.Any())
                        {
                            string parentId = "accordionInstruments_" + account.Id;
                            string modalId = "modalInstrumentGroupChart_" + parentId;
                            string canvasId = "modalInstrumentChartGroupCanvas_" + parentId;
                            @RenderPieChartModalTrigger(modalId, true);
                            @RenderModal(modalId, "Пропорции инструментов", false, RenderPositionsPieChart(canvasId, modalId, account.Groups.Cast<IPieDiagramDataItem>()));
                        }
                    </div>
                </div>
            </div>
        }
        @helper RenderArrow(FamilyBudget.v3.App_CodeBase.Tinkoff.Models.DeltaType deltaType)
        {
            if (deltaType == FamilyBudget.v3.App_CodeBase.Tinkoff.Models.DeltaType.Negative)
            {
                <div class="triangle-red">
                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16">
                        <g fill="none" fill-rule="evenodd">
                            <rect width="12" height="16"></rect>
                            <polygon fill="none" class="icon__fill" points="0 12 8 12 4 5" transform="matrix(1 0 0 -1 0 17)">
                            </polygon>
                        </g>
                    </svg>
                </div>
            }
            if (deltaType == FamilyBudget.v3.App_CodeBase.Tinkoff.Models.DeltaType.Positive)
            {
                <div class="triangle-green">
                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 -1 12 16">
                        <g fill="none" fill-rule="evenodd">
                            <rect width="12" height="16"></rect>
                            <polygon fill="none" class="icon__fill" points="0 11 8 11 4 4"></polygon>
                        </g>
                    </svg>
                </div>
            }
        }
        @helper RenderWarningModalTrigger(string modalId, bool isSmall)
        {
            string modalTriggerButtonCssClass = isSmall ? "btn-sm" : "";
            <div class="col-auto account-messages-trigger" data-toggle="modal" data-target="#@modalId">
                <a href="#" class="btn btn-warning btn-circle @modalTriggerButtonCssClass">
                    <i class="fas fa-exclamation-triangle"></i>
                </a>
            </div>
        }
        @helper RenderPieChartModalTrigger(string modalId, bool isSmall)
        {
            string modalTriggerButtonCssClass = isSmall ? "btn-sm" : "";
            <div class="col-auto account-messages-trigger ml-2" data-toggle="modal" data-target="#@modalId">
                <div class="input-group-text"><i class="fa fa-chart-pie"></i></div>
            </div>
        }
        @helper RenderGroup(string parentId, string id, string caption, string modalCaption, TinkoffPortfolioGroup data)
        {
            if (data.Positions != null)
            {
                <div class="card mb-1">
                    @{
                        string headingId = parentId + "_heading_" + id;
                        string collapseId = parentId + "_collapse_" + id;
                        string diagramId = parentId + "_diagram_" + id;
                    }
                    <div class="card-header py-3" id="@headingId">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <h4 class="m-0 font-weight-bold text-primary cursor-pointer" data-toggle="collapse" data-target="#@collapseId" aria-controls="@collapseId">
                                    @caption

                                </h4>
                            </div>
                            @if (data.Positions.Any())
                            {
                                string modalId = "modalInstrumentChart_" + parentId + "_" + id;
                                string canvasId = "modalInstrumentChartCanvas_" + parentId + "_" + id;
                                @RenderPieChartModalTrigger(modalId, true);
                                @RenderModal(modalId, "Пропорции инструментов", false, RenderPositionsPieChart(canvasId, modalId, data.Positions.Cast<IPieDiagramDataItem>()));
                            }

                        </div>
                    </div>
                    <div id="@collapseId" class="collapse" data-parent="#@parentId">
                        @RenderGrid(data.Positions)
                    </div>
                </div>
            }
        }
        @helper RenderGrid(dynamic source)
        {
            if (source != null)
            {
                <table class="table-instruments">
                    @foreach (var sourceItem in source)
                    {
                        <tr class="table-instruments-row">
                            <td class="table-instruments-column">
                                <a href="@sourceItem.TickerPageLink" target="_blank">
                                    <div class="table-instruments-info">
                                        <div class="table-instruments-info-avatar">
                                            <img class="stock-position-avatar" src="@sourceItem.AvatarImageLink" />
                                        </div>
                                        <div class="table-instruments-info-details">
                                            <div class="table-instruments-info-details-name">@sourceItem.Name</div>
                                            <div class="table-instruments-info-details-ticker">@sourceItem.Balance шт.</div>
                                        </div>
                                    </div>
                                </a>
                            </td>
                            <td class="table-instruments-column">
                                <a href="@sourceItem.TickerPageLink" target="_blank">
                                    @if (!string.IsNullOrEmpty(sourceItem.Ticker))
                                    {
                                        <div class="row no-gutters align-items-center">
                                            <div class="col text-gray-800 table-instruments-price-details">
                                                <div class="mb-0 font-weight-bold text-right">@sourceItem.CurrentTotalInPortfolioPresentation</div>
                                                <div class="mb-0 text-right table-instruments-price-details-delta">
                                                    @RenderArrow(sourceItem.CurrentDeltaType)
                                                    @sourceItem.CurrentDeltaPresentation (@sourceItem.CurrentDeltaPercent%)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="row no-gutters align-items-center">
                                            <div class="col">
                                                <div class="mb-0 font-weight-bold text-gray-800 text-right">@sourceItem.CurrentTotalInPortfolioPresentation</div>
                                            </div>
                                        </div>
                                    }
                                </a>
                            </td>
                        </tr>
                    }
                </table>
            }
        }

        if (Model != null && Model.Accounts.Any())
        {
            <div class="row">
                @foreach (var account in Model.Accounts)
                {
                    <div class="col-lg-6">
                        @RenderAccountHeader(account)
                        <div id="accordionInstruments_@account.Id">
                            @foreach (var group in account.Groups)
                            {
                                @RenderGroup("accordionInstruments_" + @account.Id, @group.Code, @group.Name, @account.Name + " - " + @group.Name, group)
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

