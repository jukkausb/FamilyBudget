//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace FamilyBudget.v3.App_CodeBase.Tinkoff
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ITinkoffInvestApiClient
    {
        /// <summary>Регистрация клиента в sandbox</summary>
        /// <param name="body">Запрос на создание счета и выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SandboxRegisterResponse> RegisterAsync(SandboxRegisterRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Регистрация клиента в sandbox</summary>
        /// <param name="body">Запрос на создание счета и выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SandboxRegisterResponse> RegisterAsync(SandboxRegisterRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Выставление баланса по валютным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> BalanceAsync(string brokerAccountId, SandboxSetCurrencyBalanceRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Выставление баланса по валютным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> BalanceAsync(string brokerAccountId, SandboxSetCurrencyBalanceRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Выставление баланса по инструментным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по инструментным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> Balance2Async(string brokerAccountId, SandboxSetPositionBalanceRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Выставление баланса по инструментным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по инструментным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> Balance2Async(string brokerAccountId, SandboxSetPositionBalanceRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Удаление счета</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> RemoveAsync(string brokerAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Удаление счета</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> RemoveAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Удаление всех позиций</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> ClearAsync(string brokerAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Удаление всех позиций</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> ClearAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение списка активных заявок</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список заявок</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersResponse> OrdersAsync(string brokerAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка активных заявок</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список заявок</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersResponse> OrdersAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Создание лимитной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LimitOrderResponse> LimitOrderAsync(string figi, string brokerAccountId, LimitOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создание лимитной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LimitOrderResponse> LimitOrderAsync(string figi, string brokerAccountId, LimitOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Создание рыночной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Уникальный идентификатор счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketOrderResponse> MarketOrderAsync(string figi, string brokerAccountId, MarketOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создание рыночной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Уникальный идентификатор счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketOrderResponse> MarketOrderAsync(string figi, string brokerAccountId, MarketOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Отмена заявки</summary>
        /// <param name="orderId">ID заявки</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> CancelAsync(string orderId, string brokerAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Отмена заявки</summary>
        /// <param name="orderId">ID заявки</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Empty> CancelAsync(string orderId, string brokerAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение списка операций</summary>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="figi">Figi инструмента для фильтрации</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список операций</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationsResponse> OperationsAsync(System.DateTimeOffset from, System.DateTimeOffset to, string figi, string brokerAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка операций</summary>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="figi">Figi инструмента для фильтрации</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список операций</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationsResponse> OperationsAsync(System.DateTimeOffset from, System.DateTimeOffset to, string figi, string brokerAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение портфеля клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortfolioResponse> PortfolioAsync(string brokerAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение портфеля клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortfolioResponse> PortfolioAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение валютных активов клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortfolioCurrenciesResponse> CurrenciesAsync(string brokerAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение валютных активов клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortfolioCurrenciesResponse> CurrenciesAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение брокерских счетов клиента</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserAccountsResponse> AccountsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение брокерских счетов клиента</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserAccountsResponse> AccountsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение списка акций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> StocksAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка акций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> StocksAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение списка облигаций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> BondsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка облигаций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> BondsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение списка ETF</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> EtfsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка ETF</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> EtfsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение списка валютных пар</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> Currencies2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка валютных пар</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> Currencies2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение стакана по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="depth">Глубина стакана [1..20]</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderbookResponse> OrderbookAsync(string figi, int depth);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение стакана по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="depth">Глубина стакана [1..20]</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderbookResponse> OrderbookAsync(string figi, int depth, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение исторических свечей по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="interval">Интервал свечи</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CandlesResponse> CandlesAsync(string figi, System.DateTimeOffset from, System.DateTimeOffset to, CandleResolution interval);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение исторических свечей по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="interval">Интервал свечи</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CandlesResponse> CandlesAsync(string figi, System.DateTimeOffset from, System.DateTimeOffset to, CandleResolution interval, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение инструмента по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchMarketInstrumentResponse> ByFigiAsync(string figi);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение инструмента по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchMarketInstrumentResponse> ByFigiAsync(string figi, System.Threading.CancellationToken cancellationToken);

        /// <summary>Получение инструмента по тикеру</summary>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> ByTickerAsync(string ticker);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение инструмента по тикеру</summary>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> ByTickerAsync(string ticker, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TinkoffInvestApiClient : ITinkoffInvestApiClient
    {
        private string _baseUrl = "https://api-invest.tinkoff.ru/openapi/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TinkoffInvestApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Регистрация клиента в sandbox</summary>
        /// <param name="body">Запрос на создание счета и выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SandboxRegisterResponse> RegisterAsync(SandboxRegisterRequest body)
        {
            return RegisterAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Регистрация клиента в sandbox</summary>
        /// <param name="body">Запрос на создание счета и выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SandboxRegisterResponse> RegisterAsync(SandboxRegisterRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sandbox/register");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SandboxRegisterResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Выставление баланса по валютным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Empty> BalanceAsync(string brokerAccountId, SandboxSetCurrencyBalanceRequest body)
        {
            return BalanceAsync(brokerAccountId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Выставление баланса по валютным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по валютным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Empty> BalanceAsync(string brokerAccountId, SandboxSetCurrencyBalanceRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sandbox/currencies/balance?");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Empty>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Выставление баланса по инструментным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по инструментным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Empty> Balance2Async(string brokerAccountId, SandboxSetPositionBalanceRequest body)
        {
            return Balance2Async(brokerAccountId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Выставление баланса по инструментным позициям</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <param name="body">Запрос на выставление баланса по инструментным позициям</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Empty> Balance2Async(string brokerAccountId, SandboxSetPositionBalanceRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sandbox/positions/balance?");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Empty>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Удаление счета</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Empty> RemoveAsync(string brokerAccountId)
        {
            return RemoveAsync(brokerAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Удаление счета</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Empty> RemoveAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sandbox/remove?");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Empty>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Удаление всех позиций</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Empty> ClearAsync(string brokerAccountId)
        {
            return ClearAsync(brokerAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Удаление всех позиций</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Empty> ClearAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sandbox/clear?");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Empty>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение списка активных заявок</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список заявок</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrdersResponse> OrdersAsync(string brokerAccountId)
        {
            return OrdersAsync(brokerAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка активных заявок</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список заявок</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OrdersResponse> OrdersAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders?");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrdersResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Создание лимитной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LimitOrderResponse> LimitOrderAsync(string figi, string brokerAccountId, LimitOrderRequest body)
        {
            return LimitOrderAsync(figi, brokerAccountId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создание лимитной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LimitOrderResponse> LimitOrderAsync(string figi, string brokerAccountId, LimitOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (figi == null)
                throw new System.ArgumentNullException("figi");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/limit-order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("figi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(figi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LimitOrderResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Создание рыночной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Уникальный идентификатор счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketOrderResponse> MarketOrderAsync(string figi, string brokerAccountId, MarketOrderRequest body)
        {
            return MarketOrderAsync(figi, brokerAccountId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создание рыночной заявки</summary>
        /// <param name="figi">FIGI инструмента</param>
        /// <param name="brokerAccountId">Уникальный идентификатор счета (по умолчанию - Тинькофф)</param>
        /// <returns>Созданная заявка</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MarketOrderResponse> MarketOrderAsync(string figi, string brokerAccountId, MarketOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (figi == null)
                throw new System.ArgumentNullException("figi");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/market-order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("figi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(figi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketOrderResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Отмена заявки</summary>
        /// <param name="orderId">ID заявки</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Empty> CancelAsync(string orderId, string brokerAccountId)
        {
            return CancelAsync(orderId, brokerAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Отмена заявки</summary>
        /// <param name="orderId">ID заявки</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Empty> CancelAsync(string orderId, string brokerAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/cancel?");
            urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Empty>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение списка операций</summary>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="figi">Figi инструмента для фильтрации</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список операций</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OperationsResponse> OperationsAsync(System.DateTimeOffset from, System.DateTimeOffset to, string figi, string brokerAccountId)
        {
            return OperationsAsync(from, to, figi, brokerAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка операций</summary>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="figi">Figi инструмента для фильтрации</param>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Список операций</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OperationsResponse> OperationsAsync(System.DateTimeOffset from, System.DateTimeOffset to, string figi, string brokerAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/operations?");
            urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(from.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("to") + "=").Append(System.Uri.EscapeDataString(to.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (figi != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("figi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(figi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationsResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0411\u0440\u043e\u043a\u0435\u0440\u0441\u043a\u0438\u0439 \u0441\u0447\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение портфеля клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PortfolioResponse> PortfolioAsync(string brokerAccountId)
        {
            return PortfolioAsync(brokerAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение портфеля клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PortfolioResponse> PortfolioAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/portfolio?");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PortfolioResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0411\u0440\u043e\u043a\u0435\u0440\u0441\u043a\u0438\u0439 \u0441\u0447\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение валютных активов клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PortfolioCurrenciesResponse> CurrenciesAsync(string brokerAccountId)
        {
            return CurrenciesAsync(brokerAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение валютных активов клиента</summary>
        /// <param name="brokerAccountId">Номер счета (по умолчанию - Тинькофф)</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PortfolioCurrenciesResponse> CurrenciesAsync(string brokerAccountId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/portfolio/currencies?");
            if (brokerAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brokerAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brokerAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PortfolioCurrenciesResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0411\u0440\u043e\u043a\u0435\u0440\u0441\u043a\u0438\u0439 \u0441\u0447\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение брокерских счетов клиента</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserAccountsResponse> AccountsAsync()
        {
            return AccountsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение брокерских счетов клиента</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserAccountsResponse> AccountsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user/accounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserAccountsResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0411\u0440\u043e\u043a\u0435\u0440\u0441\u043a\u0438\u0439 \u0441\u0447\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение списка акций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketInstrumentListResponse> StocksAsync()
        {
            return StocksAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка акций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> StocksAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/stocks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketInstrumentListResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение списка облигаций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketInstrumentListResponse> BondsAsync()
        {
            return BondsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка облигаций</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> BondsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/bonds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketInstrumentListResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение списка ETF</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketInstrumentListResponse> EtfsAsync()
        {
            return EtfsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка ETF</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> EtfsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/etfs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketInstrumentListResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение списка валютных пар</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketInstrumentListResponse> Currencies2Async()
        {
            return Currencies2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение списка валютных пар</summary>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> Currencies2Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/currencies");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketInstrumentListResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение стакана по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="depth">Глубина стакана [1..20]</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderbookResponse> OrderbookAsync(string figi, int depth)
        {
            return OrderbookAsync(figi, depth, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение стакана по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="depth">Глубина стакана [1..20]</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OrderbookResponse> OrderbookAsync(string figi, int depth, System.Threading.CancellationToken cancellationToken)
        {
            if (figi == null)
                throw new System.ArgumentNullException("figi");

            if (depth == null)
                throw new System.ArgumentNullException("depth");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/orderbook?");
            urlBuilder_.Append(System.Uri.EscapeDataString("figi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(figi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("depth") + "=").Append(System.Uri.EscapeDataString(ConvertToString(depth, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderbookResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение исторических свечей по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="interval">Интервал свечи</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CandlesResponse> CandlesAsync(string figi, System.DateTimeOffset from, System.DateTimeOffset to, CandleResolution interval)
        {
            return CandlesAsync(figi, from, to, interval, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение исторических свечей по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <param name="from">Начало временного промежутка</param>
        /// <param name="to">Конец временного промежутка</param>
        /// <param name="interval">Интервал свечи</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CandlesResponse> CandlesAsync(string figi, System.DateTimeOffset from, System.DateTimeOffset to, CandleResolution interval, System.Threading.CancellationToken cancellationToken)
        {
            if (figi == null)
                throw new System.ArgumentNullException("figi");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/candles?");
            urlBuilder_.Append(System.Uri.EscapeDataString("figi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(figi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(from.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("to") + "=").Append(System.Uri.EscapeDataString(to.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("interval") + "=").Append(System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CandlesResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение инструмента по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchMarketInstrumentResponse> ByFigiAsync(string figi)
        {
            return ByFigiAsync(figi, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение инструмента по FIGI</summary>
        /// <param name="figi">FIGI</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchMarketInstrumentResponse> ByFigiAsync(string figi, System.Threading.CancellationToken cancellationToken)
        {
            if (figi == null)
                throw new System.ArgumentNullException("figi");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/search/by-figi?");
            urlBuilder_.Append(System.Uri.EscapeDataString("figi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(figi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchMarketInstrumentResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Получение инструмента по тикеру</summary>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketInstrumentListResponse> ByTickerAsync(string ticker)
        {
            return ByTickerAsync(ticker, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получение инструмента по тикеру</summary>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Успешный ответ</returns>
        /// <exception cref="TinkoffApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> ByTickerAsync(string ticker, System.Threading.CancellationToken cancellationToken)
        {
            if (ticker == null)
                throw new System.ArgumentNullException("ticker");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/search/by-ticker?");
            urlBuilder_.Append(System.Uri.EscapeDataString("ticker") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ticker, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketInstrumentListResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new TinkoffApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new TinkoffApiException<Error>("\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new TinkoffApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new TinkoffApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new TinkoffApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Empty
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Payload { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Error";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Payload Payload { get; set; } = new Payload();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PortfolioResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Portfolio Payload { get; set; } = new Portfolio();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Portfolio
    {
        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PortfolioPosition> Positions { get; set; } = new System.Collections.ObjectModel.Collection<PortfolioPosition>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserAccountsResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserAccounts Payload { get; set; } = new UserAccounts();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserAccounts
    {
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserAccount> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<UserAccount>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserAccount
    {
        [Newtonsoft.Json.JsonProperty("brokerAccountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerAccountType BrokerAccountType { get; set; }

        [Newtonsoft.Json.JsonProperty("brokerAccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BrokerAccountId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PortfolioCurrenciesResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Currencies Payload { get; set; } = new Currencies();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Currencies
    {
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CurrencyPosition> Currencies1 { get; set; } = new System.Collections.ObjectModel.Collection<CurrencyPosition>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyPosition
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public double Balance { get; set; }

        [Newtonsoft.Json.JsonProperty("blocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Blocked { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PortfolioPosition
    {
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ticker { get; set; }

        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        [Newtonsoft.Json.JsonProperty("instrumentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstrumentType InstrumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public double Balance { get; set; }

        [Newtonsoft.Json.JsonProperty("blocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Blocked { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedYield", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyAmount ExpectedYield { get; set; }

        [Newtonsoft.Json.JsonProperty("lots", Required = Newtonsoft.Json.Required.Always)]
        public int Lots { get; set; }

        [Newtonsoft.Json.JsonProperty("averagePositionPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyAmount AveragePositionPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("averagePositionPriceNoNkd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyAmount AveragePositionPriceNoNkd { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MoneyAmount
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderbookResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Orderbook Payload { get; set; } = new Orderbook();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Orderbook
    {
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Always)]
        public int Depth { get; set; }

        [Newtonsoft.Json.JsonProperty("bids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderResponse> Bids { get; set; } = new System.Collections.ObjectModel.Collection<OrderResponse>();

        [Newtonsoft.Json.JsonProperty("asks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderResponse> Asks { get; set; } = new System.Collections.ObjectModel.Collection<OrderResponse>();

        [Newtonsoft.Json.JsonProperty("tradeStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeStatus TradeStatus { get; set; }

        /// <summary>Шаг цены</summary>
        [Newtonsoft.Json.JsonProperty("minPriceIncrement", Required = Newtonsoft.Json.Required.Always)]
        public double MinPriceIncrement { get; set; }

        /// <summary>Номинал для облигаций</summary>
        [Newtonsoft.Json.JsonProperty("faceValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FaceValue { get; set; }

        [Newtonsoft.Json.JsonProperty("lastPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LastPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("closePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClosePrice { get; set; }

        /// <summary>Верхняя граница цены</summary>
        [Newtonsoft.Json.JsonProperty("limitUp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LimitUp { get; set; }

        /// <summary>Нижняя граница цены</summary>
        [Newtonsoft.Json.JsonProperty("limitDown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LimitDown { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderResponse
    {
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CandlesResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Candles Payload { get; set; } = new Candles();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Candles
    {
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CandleResolution Interval { get; set; }

        [Newtonsoft.Json.JsonProperty("candles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Candle> Candles1 { get; set; } = new System.Collections.ObjectModel.Collection<Candle>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Candle
    {
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CandleResolution Interval { get; set; }

        [Newtonsoft.Json.JsonProperty("o", Required = Newtonsoft.Json.Required.Always)]
        public double O { get; set; }

        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Always)]
        public double C { get; set; }

        [Newtonsoft.Json.JsonProperty("h", Required = Newtonsoft.Json.Required.Always)]
        public double H { get; set; }

        [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.Always)]
        public double L { get; set; }

        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Always)]
        public int V { get; set; }

        /// <summary>ISO8601</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OperationsResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Operations Payload { get; set; } = new Operations();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Operations
    {
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Operation> Operations1 { get; set; } = new System.Collections.ObjectModel.Collection<Operation>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OperationTrade
    {
        [Newtonsoft.Json.JsonProperty("tradeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeId { get; set; }

        /// <summary>ISO8601</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Operation
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("trades", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationTrade> Trades { get; set; }

        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyAmount Commission { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Always)]
        public double Payment { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        /// <summary>Число инструментов в выставленной заявке</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }

        /// <summary>Число инструментов, исполненных в заявке</summary>
        [Newtonsoft.Json.JsonProperty("quantityExecuted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int QuantityExecuted { get; set; }

        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("instrumentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstrumentType InstrumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("isMarginCall", Required = Newtonsoft.Json.Required.Always)]
        public bool IsMarginCall { get; set; }

        /// <summary>ISO8601</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }

        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationTypeWithCommission OperationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrdersResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Order> Payload { get; set; } = new System.Collections.ObjectModel.Collection<Order>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Order
    {
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationType Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedLots", Required = Newtonsoft.Json.Required.Always)]
        public int RequestedLots { get; set; }

        [Newtonsoft.Json.JsonProperty("executedLots", Required = Newtonsoft.Json.Required.Always)]
        public int ExecutedLots { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LimitOrderRequest
    {
        [Newtonsoft.Json.JsonProperty("lots", Required = Newtonsoft.Json.Required.Always)]
        public int Lots { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationType Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LimitOrderResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PlacedLimitOrder Payload { get; set; } = new PlacedLimitOrder();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlacedLimitOrder
    {
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationType Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReason { get; set; }

        /// <summary>Сообщение об ошибке</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedLots", Required = Newtonsoft.Json.Required.Always)]
        public int RequestedLots { get; set; }

        [Newtonsoft.Json.JsonProperty("executedLots", Required = Newtonsoft.Json.Required.Always)]
        public int ExecutedLots { get; set; }

        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyAmount Commission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketOrderRequest
    {
        [Newtonsoft.Json.JsonProperty("lots", Required = Newtonsoft.Json.Required.Always)]
        public int Lots { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationType Operation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketOrderResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PlacedMarketOrder Payload { get; set; } = new PlacedMarketOrder();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlacedMarketOrder
    {
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationType Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReason { get; set; }

        /// <summary>Сообщение об ошибке</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedLots", Required = Newtonsoft.Json.Required.Always)]
        public int RequestedLots { get; set; }

        [Newtonsoft.Json.JsonProperty("executedLots", Required = Newtonsoft.Json.Required.Always)]
        public int ExecutedLots { get; set; }

        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyAmount Commission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TradeStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NormalTrading")]
        NormalTrading = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAvailableForTrading")]
        NotAvailableForTrading = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OperationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Buy")]
        Buy = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sell")]
        Sell = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OperationTypeWithCommission
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Buy")]
        Buy = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BuyCard")]
        BuyCard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sell")]
        Sell = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BrokerCommission")]
        BrokerCommission = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExchangeCommission")]
        ExchangeCommission = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCommission")]
        ServiceCommission = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MarginCommission")]
        MarginCommission = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OtherCommission")]
        OtherCommission = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PayIn")]
        PayIn = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PayOut")]
        PayOut = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Tax")]
        Tax = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxLucre")]
        TaxLucre = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxDividend")]
        TaxDividend = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxCoupon")]
        TaxCoupon = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxBack")]
        TaxBack = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Repayment")]
        Repayment = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PartRepayment")]
        PartRepayment = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Coupon")]
        Coupon = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Dividend")]
        Dividend = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityIn")]
        SecurityIn = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityOut")]
        SecurityOut = 20,

    }

    /// <summary>Статус заявки</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OperationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Done")]
        Done = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Decline")]
        Decline = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Progress")]
        Progress = 2,

    }

    /// <summary>Интервал свечи и допустимый промежуток запроса:
    /// - 1min [1 minute, 1 day]
    /// - 2min [2 minutes, 1 day]
    /// - 3min [3 minutes, 1 day]
    /// - 5min [5 minutes, 1 day]
    /// - 10min [10 minutes, 1 day]
    /// - 15min [15 minutes, 1 day]
    /// - 30min [30 minutes, 1 day]
    /// - hour [1 hour, 7 days]
    /// - day [1 day, 1 year]
    /// - week [7 days, 2 years]
    /// - month [1 month, 10 years]
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CandleResolution
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1min")]
        _1min = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2min")]
        _2min = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"3min")]
        _3min = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"5min")]
        _5min = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"10min")]
        _10min = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"15min")]
        _15min = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"30min")]
        _30min = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"hour")]
        Hour = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"day")]
        Day = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"week")]
        Week = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"month")]
        Month = 10,

    }

    /// <summary>Статус заявки</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyFill")]
        PartiallyFill = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Fill")]
        Fill = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Replaced")]
        Replaced = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingCancel")]
        PendingCancel = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingReplace")]
        PendingReplace = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
        PendingNew = 8,

    }

    /// <summary>Тип заявки</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Limit")]
        Limit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Market")]
        Market = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SandboxRegisterRequest
    {
        [Newtonsoft.Json.JsonProperty("brokerAccountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerAccountType BrokerAccountType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SandboxRegisterResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SandboxAccount Payload { get; set; } = new SandboxAccount();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SandboxAccount
    {
        [Newtonsoft.Json.JsonProperty("brokerAccountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerAccountType BrokerAccountType { get; set; }

        [Newtonsoft.Json.JsonProperty("brokerAccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BrokerAccountId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SandboxSetCurrencyBalanceRequest
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SandboxCurrency Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public double Balance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SandboxSetPositionBalanceRequest
    {
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public double Balance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketInstrumentListResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MarketInstrumentList Payload { get; set; } = new MarketInstrumentList();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketInstrumentList
    {
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public double Total { get; set; }

        [Newtonsoft.Json.JsonProperty("instruments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MarketInstrument> Instruments { get; set; } = new System.Collections.ObjectModel.Collection<MarketInstrument>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchMarketInstrumentResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchMarketInstrument Payload { get; set; } = new SearchMarketInstrument();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketInstrumentResponse
    {
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = "Ok";

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MarketInstrument Payload { get; set; } = new MarketInstrument();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchMarketInstrument
    {
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ticker { get; set; }

        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>Шаг цены</summary>
        [Newtonsoft.Json.JsonProperty("minPriceIncrement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinPriceIncrement { get; set; }

        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Always)]
        public int Lot { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstrumentType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketInstrument
    {
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Figi { get; set; }

        [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ticker { get; set; }

        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>Шаг цены</summary>
        [Newtonsoft.Json.JsonProperty("minPriceIncrement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinPriceIncrement { get; set; }

        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Always)]
        public int Lot { get; set; }

        /// <summary>Минимальное число инструментов для покупки должно быть не меньше, чем размер лота х количество лотов</summary>
        [Newtonsoft.Json.JsonProperty("minQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstrumentType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SandboxCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Currency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstrumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Stock")]
        Stock = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Currency")]
        Currency = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Bond")]
        Bond = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Etf")]
        Etf = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BrokerAccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Tinkoff")]
        Tinkoff = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TinkoffIis")]
        TinkoffIis = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Payload
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TinkoffApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public TinkoffApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TinkoffApiException<TResult> : TinkoffApiException
    {
        public TResult Result { get; private set; }

        public TinkoffApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108